name: Build and push container on new Predbat release

on:
  schedule:
    - cron: '0 0 * * *'  # midnight UTC daily
  workflow_dispatch:

permissions:
  contents: write
  packages: write

concurrency:
  group: predbat-${{ github.ref }}
  cancel-in-progress: false

jobs:
  check-and-update:
    name: Check Predbat release
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.decide.outputs.should_build }}
      predbat_version: ${{ steps.get_latest.outputs.predbat_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get latest Predbat release tag
        id: get_latest
        run: |
          latest=$(curl -s https://api.github.com/repos/springfall2008/batpred/releases/latest | jq -r .tag_name)
          echo "Latest predbat release: $latest"
          echo "predbat_version=$latest" >> "$GITHUB_OUTPUT"

      - name: Read current version
        id: get_current
        run: |
          current=$(cat predbat_version.txt)
          echo "current_version=$current" >> "$GITHUB_OUTPUT"

      - name: Decide whether to build
        id: decide
        run: |
          if [ "${{ steps.get_latest.outputs.predbat_version }}" != "${{ steps.get_current.outputs.current_version }}" ]; then
            echo "should_build=true" >> "$GITHUB_OUTPUT"
          else
            echo "should_build=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Update repo files (version + Helm) and push
        if: steps.decide.outputs.should_build == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          new_version="${{ steps.get_latest.outputs.predbat_version }}"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git fetch origin
          git pull --rebase origin main
          echo "$new_version" > predbat_version.txt
          sed -i "s/appVersion:.*/appVersion: \"${new_version}\"/" charts/predbat/Chart.yaml
          git add predbat_version.txt charts/predbat/Chart.yaml
          git commit -m "AUTOMATION: Update Predbat references to ${new_version}" || echo "No changes to commit"
          git push origin HEAD

  build:
    name: Build ${{ matrix.variant }} for ${{ matrix.platform }}
    needs: [check-and-update]
    if: needs.check-and-update.outputs.should_build == 'true'
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        variant: [noble, alpine, slim]
        platform:
          # keep in sync with your supported platforms
          - linux/amd64
          - linux/arm64
          - linux/arm/v7
        include:
          - variant: noble
            dockerfile: predbat/Dockerfile.noble
            tag_prefix: ''
          - variant: alpine
            dockerfile: predbat/Dockerfile.alpine
            tag_prefix: 'alpine-'
          - variant: slim
            dockerfile: predbat/Dockerfile.slim
            tag_prefix: 'slim-'

    env:
      REGISTRY: ghcr.io
      IMAGE: ${{ github.repository_owner }}/predbat
      PREDBAT_VERSION: ${{ needs.check-and-update.outputs.predbat_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push (single-arch)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./predbat
          file: ./${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          push: true
          provenance: false
          build-args: |
            BUILD_DATE=${{ github.event.repository.pushed_at || '1970-01-01T00:00:00Z' }}
            PREDBAT_VERSION=${{ env.PREDBAT_VERSION }}
          tags: |
            ghcr.io/${{ env.IMAGE }}:${{ matrix.tag_prefix }}${{ env.PREDBAT_VERSION }}-${{ matrix.platform##*/ }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  manifest:
    name: Create multi-arch manifests
    needs: [check-and-update, build]
    if: needs.check-and-update.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE: ${{ github.repository_owner }}/predbat
      PREDBAT_VERSION: ${{ needs.check-and-update.outputs.predbat_version }}
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifests for each variant
        run: |
          set -euo pipefail
          create_manifest () {
            local prefix="$1"    # "", "alpine-", or "slim-"
            # Arch-tagged images produced by matrix:
            # e.g. :<prefix><version>-amd64, -arm64, -v7
            docker manifest create ${REGISTRY}/${IMAGE}:${prefix}${PREDBAT_VERSION} \
              --amend ${REGISTRY}/${IMAGE}:${prefix}${PREDBAT_VERSION}-amd64 \
              --amend ${REGISTRY}/${IMAGE}:${prefix}${PREDBAT_VERSION}-arm64 \
              --amend ${REGISTRY}/${IMAGE}:${prefix}${PREDBAT_VERSION}-v7

            docker manifest push ${REGISTRY}/${IMAGE}:${prefix}${PREDBAT_VERSION}

            # Also roll "latest"/"<variant>-latest" lightweight tags
            if [ -z "$prefix" ]; then
              docker manifest create ${REGISTRY}/${IMAGE}:latest \
                --amend ${REGISTRY}/${IMAGE}:${prefix}${PREDBAT_VERSION}-amd64 \
                --amend ${REGISTRY}/${IMAGE}:${prefix}${PREDBAT_VERSION}-arm64 \
                --amend ${REGISTRY}/${IMAGE}:${prefix}${PREDBAT_VERSION}-v7
              docker manifest push ${REGISTRY}/${IMAGE}:latest
            else
              docker manifest create ${REGISTRY}/${IMAGE}:${prefix}latest \
                --amend ${REGISTRY}/${IMAGE}:${prefix}${PREDBAT_VERSION}-amd64 \
                --amend ${REGISTRY}/${IMAGE}:${prefix}${PREDBAT_VERSION}-arm64 \
                --amend ${REGISTRY}/${IMAGE}:${prefix}${PREDBAT_VERSION}-v7
              docker manifest push ${REGISTRY}/${IMAGE}:${prefix}latest
            fi
          }
          create_manifest ""
          create_manifest "alpine-"
          create_manifest "slim-"

  release:
    name: Create GitHub Release
    needs: [check-and-update, manifest]
    if: needs.check-and-update.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-and-update.outputs.predbat_version }}
          name: "ðŸ¦‡ Predbat Container Build for ${{ needs.check-and-update.outputs.predbat_version }}"
          body: |
            Automated build triggered by new upstream Predbat release ${{ needs.check-and-update.outputs.predbat_version }}.

            Pull images:
            - ghcr.io/${{ github.repository_owner }}/predbat:${{ needs.check-and-update.outputs.predbat_version }}
            - ghcr.io/${{ github.repository_owner }}/predbat:latest
            - ghcr.io/${{ github.repository_owner }}/predbat:alpine-${{ needs.check-and-update.outputs.predbat_version }}
            - ghcr.io/${{ github.repository_owner }}/predbat:alpine-latest
            - ghcr.io/${{ github.repository_owner }}/predbat:slim-${{ needs.check-and-update.outputs.predbat_version }}
            - ghcr.io/${{ github.repository_owner }}/predbat:slim-latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
